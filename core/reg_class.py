from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ConversationHandler, ContextTypes

import email_validator
from core.database.models.db_helper import db_helper
from core.database.models.user import User
from sqlalchemy import select


class RegClass:
    state_email = 1
    state_fio = 2
    state_experience = 3
    state_speciality = 4
    state_place = 5

    async def menu(self):
        classes = [
            [InlineKeyboardButton("üó≥Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç", callback_data="advice")],
            [
                InlineKeyboardButton(
                    "üóÇ –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                    callback_data="questions",
                )
            ],
            [
                InlineKeyboardButton(
                    "üóÉÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å", callback_data="speech"
                )
            ],
            [InlineKeyboardButton("üéß –ê—É–¥–∏–æ —ç—Å—Å–µ", callback_data="essay")],
        ]
        return InlineKeyboardMarkup(classes)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        session = await db_helper.get_session()
        stmt = select(User).where(User.id == update.message.from_user.id)
        user_exists = (await session.execute(stmt)).scalar_one_or_none()

        if user_exists:
            await update.message.reply_text(
                f"‚úÖ {user_exists.fio}, —Ç—ã —É–∂–µ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ!",
                reply_markup=await self.menu(),
            )
            await session.close()
            return ConversationHandler.END
        context.user_data["register"] = {}
        await update.message.reply_text(
            "üîÆ –ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç!\n"
            "–Ø - —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –Ω–µ–ø—Ä–æ—Å—Ç–æ–º –ø—É—Ç–∏ –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—é.\n"
            "–¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å–∏—Ç—å —Å–æ–≤–µ—Ç—ã –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç—á–∏–Ω–≥, –ø—Ä–∏—Å—ã–ª–∞—è –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ,"
            "–∞ —è –¥–∞–º —Ç–µ–±–µ –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–µ–π —Å–æ–≤–µ—Ç—ã, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ä–µ—á—å –ª—É—á—à–µ!\n\n"
            "–ù–æ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –∞–¥—Ä–µ—Å —ç–ª. –ø–æ—á—Ç—ã"
        )
        await session.close()
        return self.state_email

    async def get_email(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        email = update.message.text
        try:
            email_validator.validate_email(email, check_deliverability=True)

            session = await db_helper.get_session()
            stmt = select(User).where(User.email == email)
            user_exists = (await session.execute(stmt)).scalar_one_or_none()

            if user_exists:
                await update.message.reply_text(
                    "‚ö†Ô∏è –î–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —É–∂–µ –∑–∞–Ω—è—Ç - –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑–æ–∫!"
                )
                await session.close()
                return self.state_email

            context.user_data["register"]["email"] = email
            await update.message.reply_text(
                "‚úÖ –ó–∞–ø–∏—Å–∞–ª! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –§–ò–û"
            )
            await session.close()
            return self.state_fio
        except email_validator.EmailNotValidError:
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å - –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑–æ–∫!"
            )
            return self.state_email

    async def get_fio(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        fio = update.message.text
        context.user_data["register"]["fio"] = fio
        await update.message.reply_text(
            "‚úÖ –ó–∞–ø–∏—Å–∞–ª! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"
        )
        return self.state_experience

    async def get_experience(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        experience = update.message.text
        context.user_data["register"]["experience"] = experience
        await update.message.reply_text(
            "‚úÖ –ó–∞–ø–∏—Å–∞–ª! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
        )
        return self.state_speciality

    async def get_speciality(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        speciality = update.message.text
        context.user_data["register"]["speciality"] = speciality
        await update.message.reply_text(
            "‚úÖ –ó–∞–ø–∏—Å–∞–ª! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, –≥–¥–µ –∏ –∫–µ–º —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å"
        )
        return self.state_place

    async def get_place(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        place = update.message.text
        context.user_data["register"]["place"] = place

        session = await db_helper.get_session()
        user = User(
            **context.user_data["register"], id=update.message.from_user.id
        )
        session.add(user)
        await session.commit()
        await session.close()

        context.user_data.clear()
        await update.message.reply_text(
            "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª!", reply_markup=await self.menu()
        )
        return ConversationHandler.END

    async def end(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        context.user_data.clear()
        return ConversationHandler.END
