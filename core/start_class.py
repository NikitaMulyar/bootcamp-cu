from core.database.models import db_helper, User
from core.yandex_api_functions import get_ans_by_assist, get_stt, get_text
from sqlalchemy import select

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import ConversationHandler, ContextTypes


class BotClass:
    state_audio = 1
    state_audio_essay = 2
    state_which_advice = 3

    async def menu(self):
        classes = [
            [InlineKeyboardButton("üó≥Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç", callback_data="advice")],
            [
                InlineKeyboardButton(
                    "üóÇ –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                    callback_data="questions",
                )
            ],
            [
                InlineKeyboardButton(
                    "üóÉÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å", callback_data="speech"
                )
            ],
            [InlineKeyboardButton("üéß –ê—É–¥–∏–æ —ç—Å—Å–µ", callback_data="essay")],
        ]
        return InlineKeyboardMarkup(classes)

    async def get_text_advice(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("–ö–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Å–æ–≤–µ—Ç —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å?")
        return self.state_which_advice

    async def get_advice(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        await update.message.reply_text("‚è≥ –ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...")

        session = await db_helper.get_session()
        stmt = select(User).where(User.id == update.message.from_user.id)
        user = (await session.execute(stmt)).scalar_one_or_none()

        try:
            res = await get_ans_by_assist(update.message.text,
                                          user.experience, user.speciality, user.place,
                                          user.essay)
            for i in range(0, len(res), 2000):
                await update.message.reply_text(res[i : i + 2000])
            await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ!", reply_markup=await self.menu())
        except Exception as e:
            print(e)
            await update.message.reply_text(f"‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å",
                                            reply_markup=await self.menu())
        await session.close()
        return ConversationHandler.END

    async def choose_audio(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "–ü—Ä–∏—Å—ã–ª–∞–π –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –µ–≥–æ –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ "
            "–ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ç–≤–æ–µ–π —Ä–µ—á–∏"
        )
        return self.state_audio

    async def get_audio(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        session = await db_helper.get_session()
        stmt = select(User).where(User.id == update.message.from_user.id)
        user = (await session.execute(stmt)).scalar_one_or_none()

        await update.message.reply_text("‚è≥ –ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
        file = await update.message.voice.get_file()
        file_path = f"core/audio_files/{update.message.from_user.id}.ogg"
        await file.download_to_drive(file_path)
        try:
            res = await get_stt(file_path)
            advice = await get_text(
                res, user.experience, user.speciality, user.place, user.essay
            )
            for i in range(0, len(advice), 2000):
                await update.message.reply_text(advice[i : i + 2000])
            await update.message.reply_text(
                "‚úÖ –ì–æ—Ç–æ–≤–æ!", reply_markup=await self.menu()
            )
        except Exception as e:
            print(e)
            await update.message.reply_text(
                f"‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å",
                reply_markup=await self.menu(),
            )

        await session.close()
        return ConversationHandler.END

    async def get_questions(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("‚è≥ –ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...")

        session = await db_helper.get_session()
        stmt = select(User).where(User.id == query.from_user.id)
        user = (await session.execute(stmt)).scalar_one_or_none()

        try:
            res = await get_text(
                '', user.experience, user.speciality, user.place, user.essay,
                questions=True
            )
            for i in range(0, len(res), 2000):
                await context.bot.send_message(
                    query.message.chat.id, res[i : i + 2000]
                )
            await context.bot.send_message(
                query.message.chat.id,
                "–ü—Ä–∏—Å—ã–ª–∞–π –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –µ–≥–æ –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ "
                "–ø–æ –µ–µ —É–ª—É—á—à–µ–Ω–∏—é",
            )
        except Exception as e:
            print(e)
            await query.edit_message_text(
                f"‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å",
                reply_markup=await self.menu(),
            )
            await session.close()
            return ConversationHandler.END
        await session.close()
        return self.state_audio

    async def get_essay(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö soft- –∏ hard- —Å–∫–∏–ª–∞—Ö. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ "
            "–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –±–æ–ª—å–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã."
        )
        return self.state_audio_essay

    async def save_essay(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        session = await db_helper.get_session()
        stmt = select(User).where(User.id == update.message.from_user.id)
        user = (await session.execute(stmt)).scalar_one_or_none()

        await update.message.reply_text("‚è≥ –ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
        file = await update.message.voice.get_file()
        file_path = f"core/audio_files/{update.message.from_user.id}.ogg"
        await file.download_to_drive(file_path)
        try:
            res = await get_stt(file_path)
            user.essay = res
            await session.commit()
            await update.message.reply_text(
                "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.",
                reply_markup=await self.menu(),
            )
        except Exception as e:
            print(e)
            await update.message.reply_text(
                f"‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å",
                reply_markup=await self.menu(),
            )

        await session.close()
        return ConversationHandler.END

    async def end(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("‚ö†Ô∏è –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω")
        context.user_data.clear()
        return ConversationHandler.END
