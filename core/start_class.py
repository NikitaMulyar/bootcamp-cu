import aiohttp

from core.yandex_api_functions import get_text_retelling, get_img, get_text_category

from telegram import ReplyKeyboardMarkup, Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ConversationHandler, ContextTypes


class BotClass:
    async def menu(self):
        classes = [[InlineKeyboardButton('üó≥Ô∏è –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞', callback_data='pp1')],
                   [InlineKeyboardButton('üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É', callback_data='pp2')],
                   [InlineKeyboardButton('üóÉÔ∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞ —Ç–µ–∫—Å—Ç–∞', callback_data='pp3')],
                   [InlineKeyboardButton('üóÇ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç', callback_data='pp4')]]
        return InlineKeyboardMarkup(classes)

    async def stop(self):
        classes = [[InlineKeyboardButton('Ô∏èüì• –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ', callback_data='study')]]
        return InlineKeyboardMarkup(classes)

    async def stop_dialog(self):
        classes = [[InlineKeyboardButton('Ô∏è‚õîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥', callback_data='end_dialog')]]
        return InlineKeyboardMarkup(classes)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text('üîÆ –ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç!\n–î–∞–≤–Ω–æ –∏—Å–∫–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞? –¢—ã –æ–±—Ä–∞—Ç–∏–ª—Å—è –ø–æ –∞–¥—Ä–µ—Å—É!',
                                        reply_markup=await self.menu())
        return 1

    async def get_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        context.user_data['used'] = query.data
        text = '‚ñ∂Ô∏è *–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞*\n\n–ü—Ä–∏—Å—ã–ª–∞–π —Ç–µ–∫—Å—Ç\, –∏ —è –ø–µ—Ä–µ—Å–∫–∞–∂—É –µ–≥–æ —Ç–µ–±–µ\!'

        if query.data == 'pp2':
            text = ('‚ñ∂Ô∏è *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É*\n\n–í–∫–ª—é—á–∏ —Å–≤–æ—é —Ñ–∞–Ω—Ç–∞–∑–∏—é –Ω–∞ –º–∞–∫—Å–∏–º—É–º\: '
                    '–æ–ø–∏—à–∏\, –∫–∞–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç—ã —Ö–æ—á–µ—à—å\!')
        elif query.data == 'pp3':
            text = '‚ñ∂Ô∏è *–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞ —Ç–µ–∫—Å—Ç–∞*\n\n–ü—Ä–∏—Å—ã–ª–∞–π —Ç–µ–∫—Å—Ç\, –∏ —è —Å–∫–∞–∂—É\, –∫ –∫–∞–∫–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è\!'
        elif query.data == 'pp4':
            text = '‚ñ∂Ô∏è *AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç*\n\n–ü—Ä–∏—Å—ã–ª–∞–π —Ñ–∞–π–ª—ã –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–µ–±\-—Å—Ç—Ä–∞–Ω–∏—Ü—ã\, –∏ —è —Å–º–æ–≥—É –Ω–∞–≤–∏–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–∏–º —Ç–µ–±—è\!'

        if query.message.photo:
            await context.bot.send_message(query.message.chat.id, text, parse_mode='MarkdownV2')
        else:
            await query.edit_message_text(text, parse_mode='MarkdownV2')
        if query.data == 'pp4':
            context.user_data['list'] = []
            return 3
        return 2

    async def process_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text('‚è≥ –ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞...')
        text = update.message.text
        attempts = 3
        if context.user_data['used'] == 'pp1':
            while attempts > 0:
                try:
                    res = await get_text_retelling(text)
                    await update.message.reply_text('‚úÖ –ì–æ—Ç–æ–≤–æ!\n\n' + res, reply_markup=await self.menu())
                    context.user_data.clear()
                    return 1
                except Exception as e:
                    print(e)
                    attempts -= 1
        elif context.user_data['used'] == 'pp2':
            while attempts > 0:
                try:
                    res = await get_img(text)
                    await update.message.reply_photo(res, caption='‚úÖ –ì–æ—Ç–æ–≤–æ!', reply_markup=await self.menu())
                    context.user_data.clear()
                    return 1
                except Exception as e:
                    print(e)
                    attempts -= 1
        elif context.user_data['used'] == 'pp3':
            while attempts > 0:
                try:
                    res = await get_text_category(text)
                    await update.message.reply_text('‚úÖ –ì–æ—Ç–æ–≤–æ!\n\n' + res, reply_markup=await self.menu())
                    context.user_data.clear()
                    return 1
                except Exception as e:
                    print(e)
                    attempts -= 1
        await update.message.reply_text('‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å',
                                        reply_markup=await self.menu())
        context.user_data.clear()
        return 1

    async def get_urls(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            session = aiohttp.ClientSession()
            async with session.get(update.message.text) as response:
                res = await response.text()
                context.user_data['list'].append(res)
                await update.message.reply_text('‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω', reply_markup=await self.stop())
        except Exception as e:
            await update.message.reply_text('‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è',
                                            reply_markup=await self.stop())
        return 3

    async def get_files(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        print(update.message)
        return 3

    async def process_study(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text('‚è≥ –ò–¥–µ—Ç –æ–±—É—á–µ–Ω–∏–µ...')
        return 3

    async def end(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text('‚ö†Ô∏è –í—ã—Ö–æ–¥', reply_markup=await self.menu())
        context.user_data.clear()
        return ConversationHandler.END
